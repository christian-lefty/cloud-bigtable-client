// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service.proto

package com.google.bigtable.v1;

/**
 * Protobuf service {@code google.bigtable.v1.BigtableService}
 *
 * <pre>
 * Service for reading from and writing to existing Bigtables.
 * </pre>
 */
public  abstract class BigtableService
    implements com.google.protobuf.Service {
  protected BigtableService() {}

  public interface Interface {
    /**
     * <code>rpc ReadRows(.google.bigtable.v1.ReadRowsRequest) returns (stream .google.bigtable.v1.ReadRowsResponse);</code>
     *
     * <pre>
     * Streams back the contents of all requested rows, optionally applying
     * the same Reader filter to each. Depending on their size, rows may be
     * broken up across multiple responses, but atomicity of each row will still
     * be preserved.
     * </pre>
     */
    public abstract void readRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadRowsRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.ReadRowsResponse> done);

    /**
     * <code>rpc SampleRowKeys(.google.bigtable.v1.SampleRowKeysRequest) returns (stream .google.bigtable.v1.SampleRowKeysResponse);</code>
     *
     * <pre>
     * Returns a sample of row keys in the table. The returned row keys will
     * delimit contiguous sections of the table of approximately equal size,
     * which can be used to break up the data for distributed tasks like
     * mapreduces.
     * </pre>
     */
    public abstract void sampleRowKeys(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.SampleRowKeysRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.SampleRowKeysResponse> done);

    /**
     * <code>rpc MutateRow(.google.bigtable.v1.MutateRowRequest) returns (.google.protobuf.Empty);</code>
     *
     * <pre>
     * Mutates a row atomically. Cells already present in the row are left
     * unchanged unless explicitly changed by 'mutation'.
     * </pre>
     */
    public abstract void mutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

    /**
     * <code>rpc MutateRows(.google.bigtable.v1.MutateRowsRequest) returns (.google.bigtable.v1.MutateRowsResponse);</code>
     *
     * <pre>
     * Mutates multiple rows in a batch. Each individual row is mutated
     * atomically as in MutateRow, but the entire batch is not executed
     * atomically.
     * </pre>
     */
    public abstract void mutateRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowsRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.MutateRowsResponse> done);

    /**
     * <code>rpc CheckAndMutateRow(.google.bigtable.v1.CheckAndMutateRowRequest) returns (.google.bigtable.v1.CheckAndMutateRowResponse);</code>
     *
     * <pre>
     * Mutates a row atomically based on the output of a predicate Reader filter.
     * </pre>
     */
    public abstract void checkAndMutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.CheckAndMutateRowRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.CheckAndMutateRowResponse> done);

    /**
     * <code>rpc ReadModifyWriteRow(.google.bigtable.v1.ReadModifyWriteRowRequest) returns (.google.bigtable.v1.Row);</code>
     *
     * <pre>
     * Modifies a row atomically, reading the latest existing timestamp/value from
     * the specified columns and writing a new value at
     * max(existing timestamp, current server time) based on pre-defined
     * read/modify/write rules. Returns the new contents of all modified cells.
     * </pre>
     */
    public abstract void readModifyWriteRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadModifyWriteRowRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.Row> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new BigtableService() {
      @java.lang.Override
      public  void readRows(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.ReadRowsRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.v1.ReadRowsResponse> done) {
        impl.readRows(controller, request, done);
      }

      @java.lang.Override
      public  void sampleRowKeys(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.SampleRowKeysRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.v1.SampleRowKeysResponse> done) {
        impl.sampleRowKeys(controller, request, done);
      }

      @java.lang.Override
      public  void mutateRow(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.MutateRowRequest request,
          com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
        impl.mutateRow(controller, request, done);
      }

      @java.lang.Override
      public  void mutateRows(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.MutateRowsRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.v1.MutateRowsResponse> done) {
        impl.mutateRows(controller, request, done);
      }

      @java.lang.Override
      public  void checkAndMutateRow(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.CheckAndMutateRowRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.v1.CheckAndMutateRowResponse> done) {
        impl.checkAndMutateRow(controller, request, done);
      }

      @java.lang.Override
      public  void readModifyWriteRow(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.v1.ReadModifyWriteRowRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.v1.Row> done) {
        impl.readModifyWriteRow(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.readRows(controller, (com.google.bigtable.v1.ReadRowsRequest)request);
          case 1:
            return impl.sampleRowKeys(controller, (com.google.bigtable.v1.SampleRowKeysRequest)request);
          case 2:
            return impl.mutateRow(controller, (com.google.bigtable.v1.MutateRowRequest)request);
          case 3:
            return impl.mutateRows(controller, (com.google.bigtable.v1.MutateRowsRequest)request);
          case 4:
            return impl.checkAndMutateRow(controller, (com.google.bigtable.v1.CheckAndMutateRowRequest)request);
          case 5:
            return impl.readModifyWriteRow(controller, (com.google.bigtable.v1.ReadModifyWriteRowRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.google.bigtable.v1.ReadRowsRequest.getDefaultInstance();
          case 1:
            return com.google.bigtable.v1.SampleRowKeysRequest.getDefaultInstance();
          case 2:
            return com.google.bigtable.v1.MutateRowRequest.getDefaultInstance();
          case 3:
            return com.google.bigtable.v1.MutateRowsRequest.getDefaultInstance();
          case 4:
            return com.google.bigtable.v1.CheckAndMutateRowRequest.getDefaultInstance();
          case 5:
            return com.google.bigtable.v1.ReadModifyWriteRowRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance();
          case 1:
            return com.google.bigtable.v1.SampleRowKeysResponse.getDefaultInstance();
          case 2:
            return com.google.protobuf.Empty.getDefaultInstance();
          case 3:
            return com.google.bigtable.v1.MutateRowsResponse.getDefaultInstance();
          case 4:
            return com.google.bigtable.v1.CheckAndMutateRowResponse.getDefaultInstance();
          case 5:
            return com.google.bigtable.v1.Row.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc ReadRows(.google.bigtable.v1.ReadRowsRequest) returns (stream .google.bigtable.v1.ReadRowsResponse);</code>
   *
   * <pre>
   * Streams back the contents of all requested rows, optionally applying
   * the same Reader filter to each. Depending on their size, rows may be
   * broken up across multiple responses, but atomicity of each row will still
   * be preserved.
   * </pre>
   */
  public abstract void readRows(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.ReadRowsRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.v1.ReadRowsResponse> done);

  /**
   * <code>rpc SampleRowKeys(.google.bigtable.v1.SampleRowKeysRequest) returns (stream .google.bigtable.v1.SampleRowKeysResponse);</code>
   *
   * <pre>
   * Returns a sample of row keys in the table. The returned row keys will
   * delimit contiguous sections of the table of approximately equal size,
   * which can be used to break up the data for distributed tasks like
   * mapreduces.
   * </pre>
   */
  public abstract void sampleRowKeys(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.SampleRowKeysRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.v1.SampleRowKeysResponse> done);

  /**
   * <code>rpc MutateRow(.google.bigtable.v1.MutateRowRequest) returns (.google.protobuf.Empty);</code>
   *
   * <pre>
   * Mutates a row atomically. Cells already present in the row are left
   * unchanged unless explicitly changed by 'mutation'.
   * </pre>
   */
  public abstract void mutateRow(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.MutateRowRequest request,
      com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

  /**
   * <code>rpc MutateRows(.google.bigtable.v1.MutateRowsRequest) returns (.google.bigtable.v1.MutateRowsResponse);</code>
   *
   * <pre>
   * Mutates multiple rows in a batch. Each individual row is mutated
   * atomically as in MutateRow, but the entire batch is not executed
   * atomically.
   * </pre>
   */
  public abstract void mutateRows(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.MutateRowsRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.v1.MutateRowsResponse> done);

  /**
   * <code>rpc CheckAndMutateRow(.google.bigtable.v1.CheckAndMutateRowRequest) returns (.google.bigtable.v1.CheckAndMutateRowResponse);</code>
   *
   * <pre>
   * Mutates a row atomically based on the output of a predicate Reader filter.
   * </pre>
   */
  public abstract void checkAndMutateRow(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.CheckAndMutateRowRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.v1.CheckAndMutateRowResponse> done);

  /**
   * <code>rpc ReadModifyWriteRow(.google.bigtable.v1.ReadModifyWriteRowRequest) returns (.google.bigtable.v1.Row);</code>
   *
   * <pre>
   * Modifies a row atomically, reading the latest existing timestamp/value from
   * the specified columns and writing a new value at
   * max(existing timestamp, current server time) based on pre-defined
   * read/modify/write rules. Returns the new contents of all modified cells.
   * </pre>
   */
  public abstract void readModifyWriteRow(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.v1.ReadModifyWriteRowRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.v1.Row> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.google.bigtable.v1.BigtableServicesProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.readRows(controller, (com.google.bigtable.v1.ReadRowsRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.v1.ReadRowsResponse>specializeCallback(
            done));
        return;
      case 1:
        this.sampleRowKeys(controller, (com.google.bigtable.v1.SampleRowKeysRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.v1.SampleRowKeysResponse>specializeCallback(
            done));
        return;
      case 2:
        this.mutateRow(controller, (com.google.bigtable.v1.MutateRowRequest)request,
          com.google.protobuf.RpcUtil.<com.google.protobuf.Empty>specializeCallback(
            done));
        return;
      case 3:
        this.mutateRows(controller, (com.google.bigtable.v1.MutateRowsRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.v1.MutateRowsResponse>specializeCallback(
            done));
        return;
      case 4:
        this.checkAndMutateRow(controller, (com.google.bigtable.v1.CheckAndMutateRowRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.v1.CheckAndMutateRowResponse>specializeCallback(
            done));
        return;
      case 5:
        this.readModifyWriteRow(controller, (com.google.bigtable.v1.ReadModifyWriteRowRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.v1.Row>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.google.bigtable.v1.ReadRowsRequest.getDefaultInstance();
      case 1:
        return com.google.bigtable.v1.SampleRowKeysRequest.getDefaultInstance();
      case 2:
        return com.google.bigtable.v1.MutateRowRequest.getDefaultInstance();
      case 3:
        return com.google.bigtable.v1.MutateRowsRequest.getDefaultInstance();
      case 4:
        return com.google.bigtable.v1.CheckAndMutateRowRequest.getDefaultInstance();
      case 5:
        return com.google.bigtable.v1.ReadModifyWriteRowRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance();
      case 1:
        return com.google.bigtable.v1.SampleRowKeysResponse.getDefaultInstance();
      case 2:
        return com.google.protobuf.Empty.getDefaultInstance();
      case 3:
        return com.google.bigtable.v1.MutateRowsResponse.getDefaultInstance();
      case 4:
        return com.google.bigtable.v1.CheckAndMutateRowResponse.getDefaultInstance();
      case 5:
        return com.google.bigtable.v1.Row.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.google.bigtable.v1.BigtableService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void readRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadRowsRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.ReadRowsResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.v1.ReadRowsResponse.class,
          com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance()));
    }

    public  void sampleRowKeys(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.SampleRowKeysRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.SampleRowKeysResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.google.bigtable.v1.SampleRowKeysResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.v1.SampleRowKeysResponse.class,
          com.google.bigtable.v1.SampleRowKeysResponse.getDefaultInstance()));
    }

    public  void mutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.protobuf.Empty.class,
          com.google.protobuf.Empty.getDefaultInstance()));
    }

    public  void mutateRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowsRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.MutateRowsResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.google.bigtable.v1.MutateRowsResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.v1.MutateRowsResponse.class,
          com.google.bigtable.v1.MutateRowsResponse.getDefaultInstance()));
    }

    public  void checkAndMutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.CheckAndMutateRowRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.CheckAndMutateRowResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.google.bigtable.v1.CheckAndMutateRowResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.v1.CheckAndMutateRowResponse.class,
          com.google.bigtable.v1.CheckAndMutateRowResponse.getDefaultInstance()));
    }

    public  void readModifyWriteRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadModifyWriteRowRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.v1.Row> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.google.bigtable.v1.Row.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.v1.Row.class,
          com.google.bigtable.v1.Row.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.google.bigtable.v1.ReadRowsResponse readRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadRowsRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.v1.SampleRowKeysResponse sampleRowKeys(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.SampleRowKeysRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.protobuf.Empty mutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.v1.MutateRowsResponse mutateRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowsRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.v1.CheckAndMutateRowResponse checkAndMutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.CheckAndMutateRowRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.v1.Row readModifyWriteRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadModifyWriteRowRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.google.bigtable.v1.ReadRowsResponse readRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadRowsRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.v1.ReadRowsResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance());
    }


    public com.google.bigtable.v1.SampleRowKeysResponse sampleRowKeys(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.SampleRowKeysRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.v1.SampleRowKeysResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.google.bigtable.v1.SampleRowKeysResponse.getDefaultInstance());
    }


    public com.google.protobuf.Empty mutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.protobuf.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance());
    }


    public com.google.bigtable.v1.MutateRowsResponse mutateRows(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.MutateRowsRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.v1.MutateRowsResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.google.bigtable.v1.MutateRowsResponse.getDefaultInstance());
    }


    public com.google.bigtable.v1.CheckAndMutateRowResponse checkAndMutateRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.CheckAndMutateRowRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.v1.CheckAndMutateRowResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.google.bigtable.v1.CheckAndMutateRowResponse.getDefaultInstance());
    }


    public com.google.bigtable.v1.Row readModifyWriteRow(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.v1.ReadModifyWriteRowRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.v1.Row) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.google.bigtable.v1.Row.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.BigtableService)
}

