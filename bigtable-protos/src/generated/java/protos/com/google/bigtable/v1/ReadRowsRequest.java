// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

package com.google.bigtable.v1;

/**
 * Protobuf type {@code google.bigtable.v1.ReadRowsRequest}
 *
 * <pre>
 * Request message for BigtableServer.ReadRows.
 * </pre>
 */
public  final class ReadRowsRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.bigtable.v1.ReadRowsRequest)
    ReadRowsRequestOrBuilder {
  // Use ReadRowsRequest.newBuilder() to construct.
  private ReadRowsRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ReadRowsRequest() {
    tableName_ = "";
    allowRowInterleaving_ = false;
    numRowsLimit_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ReadRowsRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            tableName_ = s;
            break;
          }
          case 18: {
            targetCase_ = 2;
            target_ = input.readBytes();
            break;
          }
          case 26: {
            com.google.bigtable.v1.RowRange.Builder subBuilder = null;
            if (targetCase_ == 3) {
              subBuilder = ((com.google.bigtable.v1.RowRange) target_).toBuilder();
            }
            target_ =
                input.readMessage(com.google.bigtable.v1.RowRange.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.bigtable.v1.RowRange) target_);
              target_ = subBuilder.buildPartial();
            }
            targetCase_ = 3;
            break;
          }
          case 42: {
            com.google.bigtable.v1.RowFilter.Builder subBuilder = null;
            if (filter_ != null) {
              subBuilder = filter_.toBuilder();
            }
            filter_ = input.readMessage(com.google.bigtable.v1.RowFilter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filter_);
              filter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 48: {

            allowRowInterleaving_ = input.readBool();
            break;
          }
          case 56: {

            numRowsLimit_ = input.readInt64();
            break;
          }
          case 66: {
            com.google.bigtable.v1.RowSet.Builder subBuilder = null;
            if (targetCase_ == 8) {
              subBuilder = ((com.google.bigtable.v1.RowSet) target_).toBuilder();
            }
            target_ =
                input.readMessage(com.google.bigtable.v1.RowSet.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.bigtable.v1.RowSet) target_);
              target_ = subBuilder.buildPartial();
            }
            targetCase_ = 8;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.v1.ReadRowsRequest.class, com.google.bigtable.v1.ReadRowsRequest.Builder.class);
  }

  private int targetCase_ = 0;
  private java.lang.Object target_;
  public enum TargetCase
      implements com.google.protobuf.Internal.EnumLite {
    ROW_KEY(2),
    ROW_RANGE(3),
    ROW_SET(8),
    TARGET_NOT_SET(0);
    private int value = 0;
    private TargetCase(int value) {
      this.value = value;
    }
    public static TargetCase valueOf(int value) {
      switch (value) {
        case 2: return ROW_KEY;
        case 3: return ROW_RANGE;
        case 8: return ROW_SET;
        case 0: return TARGET_NOT_SET;
        default: throw new java.lang.IllegalArgumentException(
          "Value is undefined for this oneof enum.");
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TargetCase
  getTargetCase() {
    return TargetCase.valueOf(
        targetCase_);
  }

  public static final int TABLE_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object tableName_;
  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table from which to read.
   * </pre>
   */
  public java.lang.String getTableName() {
    java.lang.Object ref = tableName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tableName_ = s;
      return s;
    }
  }
  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table from which to read.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getTableNameBytes() {
    java.lang.Object ref = tableName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tableName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ROW_KEY_FIELD_NUMBER = 2;
  /**
   * <code>optional bytes row_key = 2;</code>
   *
   * <pre>
   * The key of a single row from which to read.
   * </pre>
   */
  public com.google.protobuf.ByteString getRowKey() {
    if (targetCase_ == 2) {
      return (com.google.protobuf.ByteString) target_;
    }
    return com.google.protobuf.ByteString.EMPTY;
  }

  public static final int ROW_RANGE_FIELD_NUMBER = 3;
  /**
   * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
   *
   * <pre>
   * A range of rows from which to read.
   * </pre>
   */
  public com.google.bigtable.v1.RowRange getRowRange() {
    if (targetCase_ == 3) {
       return (com.google.bigtable.v1.RowRange) target_;
    }
    return com.google.bigtable.v1.RowRange.getDefaultInstance();
  }
  /**
   * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
   *
   * <pre>
   * A range of rows from which to read.
   * </pre>
   */
  public com.google.bigtable.v1.RowRangeOrBuilder getRowRangeOrBuilder() {
    if (targetCase_ == 3) {
       return (com.google.bigtable.v1.RowRange) target_;
    }
    return com.google.bigtable.v1.RowRange.getDefaultInstance();
  }

  public static final int ROW_SET_FIELD_NUMBER = 8;
  /**
   * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
   *
   * <pre>
   * A set of rows from which to read. Entries need not be in order, and will
   * be deduplicated before reading.
   * The total serialized size of the set must not exceed 1MB.
   * </pre>
   */
  public com.google.bigtable.v1.RowSet getRowSet() {
    if (targetCase_ == 8) {
       return (com.google.bigtable.v1.RowSet) target_;
    }
    return com.google.bigtable.v1.RowSet.getDefaultInstance();
  }
  /**
   * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
   *
   * <pre>
   * A set of rows from which to read. Entries need not be in order, and will
   * be deduplicated before reading.
   * The total serialized size of the set must not exceed 1MB.
   * </pre>
   */
  public com.google.bigtable.v1.RowSetOrBuilder getRowSetOrBuilder() {
    if (targetCase_ == 8) {
       return (com.google.bigtable.v1.RowSet) target_;
    }
    return com.google.bigtable.v1.RowSet.getDefaultInstance();
  }

  public static final int FILTER_FIELD_NUMBER = 5;
  private com.google.bigtable.v1.RowFilter filter_;
  /**
   * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
   *
   * <pre>
   * The filter to apply to the contents of the specified row(s). If unset,
   * reads the entire table.
   * </pre>
   */
  public boolean hasFilter() {
    return filter_ != null;
  }
  /**
   * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
   *
   * <pre>
   * The filter to apply to the contents of the specified row(s). If unset,
   * reads the entire table.
   * </pre>
   */
  public com.google.bigtable.v1.RowFilter getFilter() {
    return filter_ == null ? com.google.bigtable.v1.RowFilter.getDefaultInstance() : filter_;
  }
  /**
   * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
   *
   * <pre>
   * The filter to apply to the contents of the specified row(s). If unset,
   * reads the entire table.
   * </pre>
   */
  public com.google.bigtable.v1.RowFilterOrBuilder getFilterOrBuilder() {
    return getFilter();
  }

  public static final int ALLOW_ROW_INTERLEAVING_FIELD_NUMBER = 6;
  private boolean allowRowInterleaving_;
  /**
   * <code>optional bool allow_row_interleaving = 6;</code>
   *
   * <pre>
   * By default, rows are read sequentially, producing results which are
   * guaranteed to arrive in increasing row order. Setting
   * "allow_row_interleaving" to true allows multiple rows to be interleaved in
   * the response stream, which increases throughput but breaks this guarantee,
   * and may force the client to use more memory to buffer partially-received
   * rows. Cannot be set to true when specifying "num_rows_limit".
   * </pre>
   */
  public boolean getAllowRowInterleaving() {
    return allowRowInterleaving_;
  }

  public static final int NUM_ROWS_LIMIT_FIELD_NUMBER = 7;
  private long numRowsLimit_;
  /**
   * <code>optional int64 num_rows_limit = 7;</code>
   *
   * <pre>
   * The read will terminate after committing to N rows' worth of results. The
   * default (zero) is to return all results.
   * Note that "allow_row_interleaving" cannot be set to true when this is set.
   * </pre>
   */
  public long getNumRowsLimit() {
    return numRowsLimit_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTableNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, tableName_);
    }
    if (targetCase_ == 2) {
      output.writeBytes(
          2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) target_));
    }
    if (targetCase_ == 3) {
      output.writeMessage(3, (com.google.bigtable.v1.RowRange) target_);
    }
    if (filter_ != null) {
      output.writeMessage(5, getFilter());
    }
    if (allowRowInterleaving_ != false) {
      output.writeBool(6, allowRowInterleaving_);
    }
    if (numRowsLimit_ != 0L) {
      output.writeInt64(7, numRowsLimit_);
    }
    if (targetCase_ == 8) {
      output.writeMessage(8, (com.google.bigtable.v1.RowSet) target_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTableNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, tableName_);
    }
    if (targetCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) target_));
    }
    if (targetCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.google.bigtable.v1.RowRange) target_);
    }
    if (filter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getFilter());
    }
    if (allowRowInterleaving_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, allowRowInterleaving_);
    }
    if (numRowsLimit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, numRowsLimit_);
    }
    if (targetCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.google.bigtable.v1.RowSet) target_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.v1.ReadRowsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.v1.ReadRowsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.bigtable.v1.ReadRowsRequest}
   *
   * <pre>
   * Request message for BigtableServer.ReadRows.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.v1.ReadRowsRequest)
      com.google.bigtable.v1.ReadRowsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.v1.ReadRowsRequest.class, com.google.bigtable.v1.ReadRowsRequest.Builder.class);
    }

    // Construct using com.google.bigtable.v1.ReadRowsRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      tableName_ = "";

      if (filterBuilder_ == null) {
        filter_ = null;
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }
      allowRowInterleaving_ = false;

      numRowsLimit_ = 0L;

      targetCase_ = 0;
      target_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsRequest_descriptor;
    }

    public com.google.bigtable.v1.ReadRowsRequest getDefaultInstanceForType() {
      return com.google.bigtable.v1.ReadRowsRequest.getDefaultInstance();
    }

    public com.google.bigtable.v1.ReadRowsRequest build() {
      com.google.bigtable.v1.ReadRowsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.v1.ReadRowsRequest buildPartial() {
      com.google.bigtable.v1.ReadRowsRequest result = new com.google.bigtable.v1.ReadRowsRequest(this);
      result.tableName_ = tableName_;
      if (targetCase_ == 2) {
        result.target_ = target_;
      }
      if (targetCase_ == 3) {
        if (rowRangeBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = rowRangeBuilder_.build();
        }
      }
      if (targetCase_ == 8) {
        if (rowSetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = rowSetBuilder_.build();
        }
      }
      if (filterBuilder_ == null) {
        result.filter_ = filter_;
      } else {
        result.filter_ = filterBuilder_.build();
      }
      result.allowRowInterleaving_ = allowRowInterleaving_;
      result.numRowsLimit_ = numRowsLimit_;
      result.targetCase_ = targetCase_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.v1.ReadRowsRequest) {
        return mergeFrom((com.google.bigtable.v1.ReadRowsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.v1.ReadRowsRequest other) {
      if (other == com.google.bigtable.v1.ReadRowsRequest.getDefaultInstance()) return this;
      if (!other.getTableName().isEmpty()) {
        tableName_ = other.tableName_;
        onChanged();
      }
      if (other.hasFilter()) {
        mergeFilter(other.getFilter());
      }
      if (other.getAllowRowInterleaving() != false) {
        setAllowRowInterleaving(other.getAllowRowInterleaving());
      }
      if (other.getNumRowsLimit() != 0L) {
        setNumRowsLimit(other.getNumRowsLimit());
      }
      switch (other.getTargetCase()) {
        case ROW_KEY: {
          setRowKey(other.getRowKey());
          break;
        }
        case ROW_RANGE: {
          mergeRowRange(other.getRowRange());
          break;
        }
        case ROW_SET: {
          mergeRowSet(other.getRowSet());
          break;
        }
        case TARGET_NOT_SET: {
          break;
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.v1.ReadRowsRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.v1.ReadRowsRequest) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public TargetCase
        getTargetCase() {
      return TargetCase.valueOf(
          targetCase_);
    }

    public Builder clearTarget() {
      targetCase_ = 0;
      target_ = null;
      onChanged();
      return this;
    }


    private java.lang.Object tableName_ = "";
    /**
     * <code>optional string table_name = 1;</code>
     *
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     */
    public java.lang.String getTableName() {
      java.lang.Object ref = tableName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string table_name = 1;</code>
     *
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      java.lang.Object ref = tableName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string table_name = 1;</code>
     *
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     */
    public Builder setTableName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tableName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string table_name = 1;</code>
     *
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     */
    public Builder clearTableName() {
      
      tableName_ = getDefaultInstance().getTableName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string table_name = 1;</code>
     *
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     */
    public Builder setTableNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tableName_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>optional bytes row_key = 2;</code>
     *
     * <pre>
     * The key of a single row from which to read.
     * </pre>
     */
    public com.google.protobuf.ByteString getRowKey() {
      if (targetCase_ == 2) {
        return (com.google.protobuf.ByteString) target_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <code>optional bytes row_key = 2;</code>
     *
     * <pre>
     * The key of a single row from which to read.
     * </pre>
     */
    public Builder setRowKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  targetCase_ = 2;
      target_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bytes row_key = 2;</code>
     *
     * <pre>
     * The key of a single row from which to read.
     * </pre>
     */
    public Builder clearRowKey() {
      if (targetCase_ == 2) {
        targetCase_ = 0;
        target_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowRange, com.google.bigtable.v1.RowRange.Builder, com.google.bigtable.v1.RowRangeOrBuilder> rowRangeBuilder_;
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public com.google.bigtable.v1.RowRange getRowRange() {
      if (rowRangeBuilder_ == null) {
        if (targetCase_ == 3) {
          return (com.google.bigtable.v1.RowRange) target_;
        }
        return com.google.bigtable.v1.RowRange.getDefaultInstance();
      } else {
        if (targetCase_ == 3) {
          return rowRangeBuilder_.getMessage();
        }
        return com.google.bigtable.v1.RowRange.getDefaultInstance();
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public Builder setRowRange(com.google.bigtable.v1.RowRange value) {
      if (rowRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        rowRangeBuilder_.setMessage(value);
      }
      targetCase_ = 3;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public Builder setRowRange(
        com.google.bigtable.v1.RowRange.Builder builderForValue) {
      if (rowRangeBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        rowRangeBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 3;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public Builder mergeRowRange(com.google.bigtable.v1.RowRange value) {
      if (rowRangeBuilder_ == null) {
        if (targetCase_ == 3 &&
            target_ != com.google.bigtable.v1.RowRange.getDefaultInstance()) {
          target_ = com.google.bigtable.v1.RowRange.newBuilder((com.google.bigtable.v1.RowRange) target_)
              .mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 3) {
          rowRangeBuilder_.mergeFrom(value);
        }
        rowRangeBuilder_.setMessage(value);
      }
      targetCase_ = 3;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public Builder clearRowRange() {
      if (rowRangeBuilder_ == null) {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
        }
        rowRangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public com.google.bigtable.v1.RowRange.Builder getRowRangeBuilder() {
      return getRowRangeFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    public com.google.bigtable.v1.RowRangeOrBuilder getRowRangeOrBuilder() {
      if ((targetCase_ == 3) && (rowRangeBuilder_ != null)) {
        return rowRangeBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 3) {
          return (com.google.bigtable.v1.RowRange) target_;
        }
        return com.google.bigtable.v1.RowRange.getDefaultInstance();
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowRange row_range = 3;</code>
     *
     * <pre>
     * A range of rows from which to read.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowRange, com.google.bigtable.v1.RowRange.Builder, com.google.bigtable.v1.RowRangeOrBuilder> 
        getRowRangeFieldBuilder() {
      if (rowRangeBuilder_ == null) {
        if (!(targetCase_ == 3)) {
          target_ = com.google.bigtable.v1.RowRange.getDefaultInstance();
        }
        rowRangeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.bigtable.v1.RowRange, com.google.bigtable.v1.RowRange.Builder, com.google.bigtable.v1.RowRangeOrBuilder>(
                (com.google.bigtable.v1.RowRange) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 3;
      onChanged();;
      return rowRangeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowSet, com.google.bigtable.v1.RowSet.Builder, com.google.bigtable.v1.RowSetOrBuilder> rowSetBuilder_;
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public com.google.bigtable.v1.RowSet getRowSet() {
      if (rowSetBuilder_ == null) {
        if (targetCase_ == 8) {
          return (com.google.bigtable.v1.RowSet) target_;
        }
        return com.google.bigtable.v1.RowSet.getDefaultInstance();
      } else {
        if (targetCase_ == 8) {
          return rowSetBuilder_.getMessage();
        }
        return com.google.bigtable.v1.RowSet.getDefaultInstance();
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public Builder setRowSet(com.google.bigtable.v1.RowSet value) {
      if (rowSetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        rowSetBuilder_.setMessage(value);
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public Builder setRowSet(
        com.google.bigtable.v1.RowSet.Builder builderForValue) {
      if (rowSetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        rowSetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public Builder mergeRowSet(com.google.bigtable.v1.RowSet value) {
      if (rowSetBuilder_ == null) {
        if (targetCase_ == 8 &&
            target_ != com.google.bigtable.v1.RowSet.getDefaultInstance()) {
          target_ = com.google.bigtable.v1.RowSet.newBuilder((com.google.bigtable.v1.RowSet) target_)
              .mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 8) {
          rowSetBuilder_.mergeFrom(value);
        }
        rowSetBuilder_.setMessage(value);
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public Builder clearRowSet() {
      if (rowSetBuilder_ == null) {
        if (targetCase_ == 8) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 8) {
          targetCase_ = 0;
          target_ = null;
        }
        rowSetBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public com.google.bigtable.v1.RowSet.Builder getRowSetBuilder() {
      return getRowSetFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    public com.google.bigtable.v1.RowSetOrBuilder getRowSetOrBuilder() {
      if ((targetCase_ == 8) && (rowSetBuilder_ != null)) {
        return rowSetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 8) {
          return (com.google.bigtable.v1.RowSet) target_;
        }
        return com.google.bigtable.v1.RowSet.getDefaultInstance();
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowSet row_set = 8;</code>
     *
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowSet, com.google.bigtable.v1.RowSet.Builder, com.google.bigtable.v1.RowSetOrBuilder> 
        getRowSetFieldBuilder() {
      if (rowSetBuilder_ == null) {
        if (!(targetCase_ == 8)) {
          target_ = com.google.bigtable.v1.RowSet.getDefaultInstance();
        }
        rowSetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.bigtable.v1.RowSet, com.google.bigtable.v1.RowSet.Builder, com.google.bigtable.v1.RowSetOrBuilder>(
                (com.google.bigtable.v1.RowSet) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 8;
      onChanged();;
      return rowSetBuilder_;
    }

    private com.google.bigtable.v1.RowFilter filter_ = null;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowFilter, com.google.bigtable.v1.RowFilter.Builder, com.google.bigtable.v1.RowFilterOrBuilder> filterBuilder_;
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public boolean hasFilter() {
      return filterBuilder_ != null || filter_ != null;
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public com.google.bigtable.v1.RowFilter getFilter() {
      if (filterBuilder_ == null) {
        return filter_ == null ? com.google.bigtable.v1.RowFilter.getDefaultInstance() : filter_;
      } else {
        return filterBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public Builder setFilter(com.google.bigtable.v1.RowFilter value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filter_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public Builder setFilter(
        com.google.bigtable.v1.RowFilter.Builder builderForValue) {
      if (filterBuilder_ == null) {
        filter_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public Builder mergeFilter(com.google.bigtable.v1.RowFilter value) {
      if (filterBuilder_ == null) {
        if (filter_ != null) {
          filter_ =
            com.google.bigtable.v1.RowFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
        } else {
          filter_ = value;
        }
        onChanged();
      } else {
        filterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        filter_ = null;
        onChanged();
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public com.google.bigtable.v1.RowFilter.Builder getFilterBuilder() {
      
      onChanged();
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    public com.google.bigtable.v1.RowFilterOrBuilder getFilterOrBuilder() {
      if (filterBuilder_ != null) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        return filter_ == null ?
            com.google.bigtable.v1.RowFilter.getDefaultInstance() : filter_;
      }
    }
    /**
     * <code>optional .google.bigtable.v1.RowFilter filter = 5;</code>
     *
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.v1.RowFilter, com.google.bigtable.v1.RowFilter.Builder, com.google.bigtable.v1.RowFilterOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.bigtable.v1.RowFilter, com.google.bigtable.v1.RowFilter.Builder, com.google.bigtable.v1.RowFilterOrBuilder>(
                getFilter(),
                getParentForChildren(),
                isClean());
        filter_ = null;
      }
      return filterBuilder_;
    }

    private boolean allowRowInterleaving_ ;
    /**
     * <code>optional bool allow_row_interleaving = 6;</code>
     *
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     */
    public boolean getAllowRowInterleaving() {
      return allowRowInterleaving_;
    }
    /**
     * <code>optional bool allow_row_interleaving = 6;</code>
     *
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     */
    public Builder setAllowRowInterleaving(boolean value) {
      
      allowRowInterleaving_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool allow_row_interleaving = 6;</code>
     *
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     */
    public Builder clearAllowRowInterleaving() {
      
      allowRowInterleaving_ = false;
      onChanged();
      return this;
    }

    private long numRowsLimit_ ;
    /**
     * <code>optional int64 num_rows_limit = 7;</code>
     *
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     */
    public long getNumRowsLimit() {
      return numRowsLimit_;
    }
    /**
     * <code>optional int64 num_rows_limit = 7;</code>
     *
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     */
    public Builder setNumRowsLimit(long value) {
      
      numRowsLimit_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 num_rows_limit = 7;</code>
     *
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     */
    public Builder clearNumRowsLimit() {
      
      numRowsLimit_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.v1.ReadRowsRequest)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsRequest)
  private static final com.google.bigtable.v1.ReadRowsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.v1.ReadRowsRequest();
  }

  public static com.google.bigtable.v1.ReadRowsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReadRowsRequest>
      PARSER = new com.google.protobuf.AbstractParser<ReadRowsRequest>() {
    public ReadRowsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new ReadRowsRequest(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<ReadRowsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReadRowsRequest> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.v1.ReadRowsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

